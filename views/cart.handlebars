<div class="container py-4">
    <!-- Encabezado del carrito -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1><i class="bi bi-cart3"></i> Carrito de Compras</h1>
            <p class="text-muted mb-0">ID del carrito: {{cart._id}}</p>
        </div>
        <div>
            <button class="btn btn-outline-danger" onclick="clearCart()" {{#unless cart.products.length}}disabled{{/unless}}>
                <i class="bi bi-trash"></i> Vaciar carrito
            </button>
            <a href="/" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left"></i> Seguir comprando
            </a>
        </div>
    </div>

    {{#if cart.products.length}}
    <div class="row">
        <!-- Lista de productos -->
        <div class="col-lg-8">
            {{#each cart.products}}
            <div class="card mb-3 shadow-sm">
                <div class="row g-0">
                    <!-- Imagen del producto -->
                    <div class="col-md-3">
                        {{#if product.thumbnails.[0]}}
                        <img src="{{product.thumbnails.[0]}}" class="img-fluid rounded-start" alt="{{product.title}}" 
                             style="height: 180px; object-fit: cover; width: 100%;">
                        {{else}}
                        <div class="bg-light d-flex align-items-center justify-content-center h-100">
                            <i class="bi bi-image text-muted" style="font-size: 3rem;"></i>
                        </div>
                        {{/if}}
                    </div>
                    
                    <!-- Información del producto -->
                    <div class="col-md-5">
                        <div class="card-body h-100 d-flex flex-column">
                            <h5 class="card-title">{{product.title}}</h5>
                            <p class="card-text text-muted small mb-2">{{truncate product.description 100}}</p>
                            
                            <div class="mt-auto">
                                <span class="badge bg-{{#if product.status}}success{{else}}secondary{{/if}} mb-2">
                                    {{#if product.status}}Disponible{{else}}No disponible{{/if}}
                                </span>
                                <p class="card-text mb-1">
                                    <small class="text-muted">
                                        <i class="bi bi-tag"></i> {{product.category}} | 
                                        <i class="bi bi-upc"></i> {{product.code}}
                                    </small>
                                </p>
                                <p class="card-text mb-0">
                                    <small class="text-muted">
                                        <i class="bi bi-box"></i> Stock: {{product.stock}} unidades
                                    </small>
                                </p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Controles de cantidad y precio -->
                    <div class="col-md-4">
                        <div class="card-body h-100 d-flex flex-column">
                            <div class="text-end mb-2">
                                <button class="btn btn-sm btn-outline-danger" onclick="removeProduct('{{product._id}}')">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                            
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <span class="h5 mb-0">${{product.price}}</span>
                                    <span class="text-muted">x {{quantity}} = <strong>${{multiply product.price quantity}}</strong></span>
                                </div>
                                
                                <div class="input-group input-group-sm">
                                    <button class="btn btn-outline-secondary" 
                                            onclick="updateQuantity('{{product._id}}', {{quantity}} - 1)"
                                            {{#if (lte quantity 1)}}disabled{{/if}}>
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <input type="number" 
                                           class="form-control text-center" 
                                           value="{{quantity}}" 
                                           min="1" 
                                           max="{{product.stock}}" 
                                           id="qty-{{product._id}}"
                                           onchange="updateQuantityInput('{{product._id}}', this.value)">
                                    <button class="btn btn-outline-secondary" 
                                            onclick="updateQuantity('{{product._id}}', {{quantity}} + 1)"
                                            {{#if (gte quantity product.stock)}}disabled{{/if}}>
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                                {{#if (gt quantity product.stock)}}
                                <div class="text-danger small mt-1">
                                    <i class="bi bi-exclamation-triangle"></i> No hay suficiente stock
                                </div>
                                {{/if}}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
        
        <!-- Resumen del pedido -->
        <div class="col-lg-4">
            <div class="card shadow">
                <div class="card-header bg-light">
                    <h5 class="mb-0">Resumen del pedido</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex justify-content-between mb-2">
                        <span>Productos ({{cart.products.length}})</span>
                        <span>${{calculateSubtotal cart.products}}</span>
                    </div>
                    <div class="d-flex justify-content-between mb-3">
                        <span>Envío</span>
                        <span class="text-success">Gratis</span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between mb-3">
                        <h5>Total</h5>
                        <h5>${{calculateSubtotal cart.products}}</h5>
                    </div>
                    <button class="btn btn-primary w-100 py-2 mb-2" onclick="checkout()">
                        <i class="bi bi-credit-card"></i> Proceder al pago
                    </button>
                    <div class="text-center">
                        <img src="https://cdn.pixabay.com/photo/2015/05/26/09/37/paypal-784404_960_720.png" 
                             alt="Métodos de pago" 
                             style="max-width: 200px; opacity: 0.7;"
                             class="img-fluid mt-2">
                    </div>
                </div>
            </div>
        </div>
    </div>
    {{else}}
    <!-- Carrito vacío -->
    <div class="text-center py-5">
        <i class="bi bi-cart-x text-muted" style="font-size: 5rem;"></i>
        <h2 class="mt-3">Tu carrito está vacío</h2>
        <p class="text-muted">Añade algunos productos para comenzar</p>
        <a href="/" class="btn btn-primary mt-3">
            <i class="bi bi-arrow-left"></i> Ver productos
        </a>
    </div>
    {{/if}}
</div>

{{#section 'scripts'}}
<script>
// Configuración de tooltips de Bootstrap
const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
});

// Actualizar cantidad de producto
function updateQuantity(productId, newQuantity) {
    const inputElement = document.getElementById(`qty-${productId}`);
    const maxStock = parseInt(inputElement.max);
    
    // Validar cantidad
    newQuantity = parseInt(newQuantity);
    if (isNaN(newQuantity) || newQuantity < 1) newQuantity = 1;
    if (newQuantity > maxStock) newQuantity = maxStock;
    
    // Actualizar interfaz
    inputElement.value = newQuantity;
    
    // Enviar petición al servidor
    fetch(`/api/carts/{{cart._id}}/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ quantity: newQuantity })
    })
    .then(response => {
        if (!response.ok) throw new Error('Error al actualizar la cantidad');
        return response.json();
    })
    .then(data => {
        // Recargar la página para ver los cambios
        window.location.reload();
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Error', 'No se pudo actualizar la cantidad', 'danger');
    });
}

// Actualizar cantidad desde el input
function updateQuantityInput(productId, value) {
    updateQuantity(productId, value);
}

// Eliminar producto del carrito
function removeProduct(productId) {
    const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
    const modalBody = document.getElementById('confirmModalBody');
    const confirmBtn = document.getElementById('confirmAction');
    
    modalBody.innerHTML = '¿Estás seguro de que deseas eliminar este producto del carrito?';
    
    // Guardar referencia al botón de confirmación
    const confirmHandler = function() {
        fetch(`/api/carts/{{cart._id}}/products/${productId}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) throw new Error('Error al eliminar el producto');
            return response.json();
        })
        .then(data => {
            showToast('Éxito', 'Producto eliminado del carrito', 'success');
            // Recargar la página después de un breve retraso
            setTimeout(() => window.location.reload(), 1000);
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Error', 'No se pudo eliminar el producto', 'danger');
        })
        .finally(() => {
            // Remover el event listener para evitar múltiples llamadas
            confirmBtn.removeEventListener('click', confirmHandler);
            modal.hide();
        });
    };
    
    // Asignar el manejador de eventos
    confirmBtn.onclick = confirmHandler;
    
    // Mostrar el modal
    modal.show();
}

// Vaciar el carrito
function clearCart() {
    const modal = new bootstrap.Modal(document.getElementById('confirmModal'));
    const modalBody = document.getElementById('confirmModalBody');
    const confirmBtn = document.getElementById('confirmAction');
    
    modalBody.innerHTML = '¿Estás seguro de que deseas vaciar el carrito? Esta acción no se puede deshacer.';
    
    // Guardar referencia al botón de confirmación
    const confirmHandler = function() {
        fetch(`/api/carts/{{cart._id}}`, {
            method: 'DELETE'
        })
        .then(response => {
            if (!response.ok) throw new Error('Error al vaciar el carrito');
            return response.json();
        })
        .then(data => {
            showToast('Éxito', 'Carrito vaciado correctamente', 'success');
            // Recargar la página después de un breve retraso
            setTimeout(() => window.location.reload(), 1000);
        })
        .catch(error => {
            console.error('Error:', error);
            showToast('Error', 'No se pudo vaciar el carrito', 'danger');
        })
        .finally(() => {
            // Remover el event listener para evitar múltiples llamadas
            confirmBtn.removeEventListener('click', confirmHandler);
            modal.hide();
        });
    };
    
    // Asignar el manejador de eventos
    confirmBtn.onclick = confirmHandler;
    
    // Mostrar el modal
    modal.show();
}

// Procesar pago
function checkout() {
    // Mostrar indicador de carga
    const checkoutBtn = document.querySelector('button[onclick="checkout()"]');
    const originalText = checkoutBtn.innerHTML;
    checkoutBtn.disabled = true;
    checkoutBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Procesando...';
    
    // Simular proceso de pago (en un caso real, aquí se integraría con una pasarela de pago)
    setTimeout(() => {
        showToast('¡Compra exitosa!', 'Tu pedido ha sido procesado correctamente', 'success');
        
        // Vaciar el carrito después de una compra exitosa
        fetch(`/api/carts/{{cart._id}}`, {
            method: 'DELETE'
        })
        .then(() => {
            // Redirigir a la página de inicio después de un breve retraso
            setTimeout(() => {
                window.location.href = '/';
            }, 2000);
        });
    }, 2000);
}

// Mostrar notificación toast
function showToast(title, message, type = 'info') {
    const toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) {
        // Crear el contenedor de toasts si no existe
        const container = document.createElement('div');
        container.id = 'toastContainer';
        container.style.position = 'fixed';
        container.style.top = '20px';
        container.style.right = '20px';
        container.style.zIndex = '1100';
        document.body.appendChild(container);
    }
    
    const toastId = 'toast-' + Date.now();
    const toast = document.createElement('div');
    toast.id = toastId;
    toast.className = `toast align-items-center text-white bg-${type} border-0`;
    toast.role = 'alert';
    toast.setAttribute('aria-live', 'assertive');
    toast.setAttribute('aria-atomic', 'true');
    
    toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                <strong>${title}</strong><br>
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;
    
    document.getElementById('toastContainer').appendChild(toast);
    
    // Inicializar y mostrar el toast
    const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 3000 });
    bsToast.show();
    
    // Eliminar el toast del DOM después de que se oculte
    toast.addEventListener('hidden.bs.toast', function () {
        toast.remove();
    });
}

// Inicializar tooltips al cargar la página
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar tooltips
    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
});
</script>
{{/section}}

<div class="modal fade" id="confirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <div class="row">
    <div class="col-md-8">
        <h2> Mi Carrito</h2>
        
        {{#if cart.products.length}}
        <div id="cart-items">
            {{#each cart.products}}
            <div class="card mb-3" data-product-id="{{this.product._id}}">
                <div class="card-body">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            {{#if this.product.thumbnails}}
                            <img src="{{this.product.thumbnails.0}}" class="img-fluid rounded" alt="{{this.product.title}}">
                            {{else}}
                            <div class="bg-light d-flex align-items-center justify-content-center rounded" style="height: 80px;">
                                <span class="text-muted"></span>
                            </div>
                            {{/if}}
                        </div>
                        <div class="col-md-5">
                            <h5 class="card-title mb-1">{{this.product.title}}</h5>
                            <p class="card-text text-muted small mb-1">{{this.product.description}}</p>
                            <p class="card-text mb-0"><strong>${{this.product.price}}</strong></p>
                        </div>
                        <div class="col-md-3">
                            <div class="input-group">
                                <button class="btn btn-outline-secondary btn-sm" type="button" onclick="updateQuantity('{{this.product._id}}', {{this.quantity}} - 1)">-</button>
                                <input type="text" class="form-control form-control-sm text-center" value="{{this.quantity}}" readonly>
                                <button class="btn btn-outline-secondary btn-sm" type="button" onclick="updateQuantity('{{this.product._id}}', {{this.quantity}} + 1)">+</button>
                            </div>
                            <small class="text-muted">Subtotal: ${{multiply this.product.price this.quantity}}</small>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-danger btn-sm w-100" onclick="removeFromCart('{{this.product._id}}')"> Eliminar</button>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
        {{else}}
        <div class="alert alert-info text-center">
            <h4> Tu carrito est vaco</h4>
            <p>Agrega algunos productos para comenzar tu compra.</p>
            <a href="/" class="btn btn-primary"> Ver Productos</a>
        </div>
        {{/if}}
    </div>
    
    <div class="col-md-4">
        {{#if cart.products.length}}
        <div class="card sticky-top">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0"> Resumen de Compra</h4>
            </div>
            <div class="card-body">
                <div class="d-flex justify-content-between mb-2">
                    <span>Productos:</span>
                    <span>{{cart.products.length}} items</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span>Subtotal:</span>
                    <span id="subtotal">$0.00</span>
                </div>
                <div class="d-flex justify-content-between mb-2">
                    <span>Envio:</span>
                    <span class="text-success">Gratis </span>
                </div>
                <hr>
                <div class="d-flex justify-content-between mb-3">
                    <strong>Total:</strong>
                    <strong id="total" class="text-primary">$0.00</strong>
                </div>
                <button class="btn btn-success w-100 mb-2"> Proceder al Pago</button>
                <button class="btn btn-outline-danger w-100" onclick="clearCart()"> Vaciar Carrito</button>
                <div class="mt-3">
                    <a href="/" class="btn btn-link w-100"> Continuar Comprando</a>
                </div>
            </div>
        </div>
        {{/if}}
    </div>
</div>

<script>
// Calcular totales al cargar la pgina
document.addEventListener('DOMContentLoaded', function() {
    calculateTotals();
});

function calculateTotals() {
    let subtotal = 0;
    const cartItems = document.querySelectorAll('[data-product-id]');
    
    cartItems.forEach(item => {
        const priceText = item.querySelector('.card-text strong').textContent;
        const price = parseFloat(priceText.replace('$', ''));
        const quantity = parseInt(item.querySelector('input[readonly]').value);
        subtotal += price * quantity;
    });
    
    document.getElementById('subtotal').textContent = `$${subtotal.toFixed(2)}`;
    document.getElementById('total').textContent = `$${subtotal.toFixed(2)}`;
}

function updateQuantity(productId, newQuantity) {
    if (newQuantity < 1) return;
    
    fetch(`/api/v1/carts/1/products/${productId}`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ quantity: newQuantity })
    })
    .then(response => response.json())
    .then(data => {
        if (data.status === 'success') {
            location.reload();
        } else {
            alert(' Error al actualizar la cantidad');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert(' Error de conexin');
    });
}

function removeFromCart(productId) {
    if (confirm('Ests seguro de que quieres eliminar este producto?')) {
        fetch(`/api/v1/carts/1/products/${productId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                location.reload();
            } else {
                alert(' Error al eliminar el producto');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(' Error de conexin');
        });
    }
}

function clearCart() {
    if (confirm('Ests seguro de que quieres vaciar todo el carrito?')) {
        fetch('/api/v1/carts/1', {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                location.reload();
            } else {
                alert(' Error al vaciar el carrito');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert(' Error de conexin');
        });
    }
}

function proceedToCheckout() {
    alert('Funcionalidad de checkout no implementada en esta demo');
}

function updateTotals() {
    // Esta funcin actualizar los totales sin recargar la pgina
    location.reload();
}
</script>



